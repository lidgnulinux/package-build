diff --git a/2bwm.c b/2bwm.c
index 07ffc97..bd76bf8 100644
--- a/2bwm.c
+++ b/2bwm.c
@@ -82,19 +82,19 @@ static void maxhalf(const Arg *);
 static void teleport(const Arg *);
 static void changescreen(const Arg *);
 static void grabkeys(void);
-static void twobwm_restart();
-static void twobwm_exit();
+static void twobwm_restart(const Arg *);
+static void twobwm_exit(const Arg *);
 static void centerpointer(xcb_drawable_t, struct client *);
-static void always_on_top();
+static void always_on_top(const Arg *);
 static bool setup_keyboard(void);
 static bool setupscreen(void);
 static int  setuprandr(void);
 static void arrangewindows(void);
-static void prevworkspace();
-static void nextworkspace();
+static void prevworkspace(const Arg *);
+static void nextworkspace(const Arg *);
 static void getrandr(void);
 static void raise_current_window(void);
-static void raiseorlower();
+static void raiseorlower(const Arg *);
 static void setunfocus(void);
 static void maximize(const Arg *);
 static void fullscreen(const Arg *);
@@ -103,9 +103,9 @@ static void maxwin(struct client *, uint8_t);
 static void maximize_helper(struct client *,uint16_t, uint16_t, uint16_t, uint16_t);
 static void hide();
 static void clientmessage(xcb_generic_event_t *);
-static void deletewin();
-static void unkillable();
-static void fix();
+static void deletewin(const Arg *);
+static void unkillable(const Arg *);
+static void fix(const Arg *);
 static void check_name(struct client *);
 static void addtoclientlist(const xcb_drawable_t);
 static void configurerequest(xcb_generic_event_t *);
@@ -165,13 +165,13 @@ static void snapwindow(struct client *);
 
 ///---Function bodies---///
 void
-fix()
+fix(const Arg *)
 {
 	fixwindow(focuswin);
 }
 
 void
-unkillable()
+unkillable(const Arg *)
 {
 	unkillablewindow(focuswin);
 }
@@ -220,20 +220,20 @@ changeworkspace(const Arg *arg)
 }
 
 void
-nextworkspace()
+nextworkspace(const Arg *)
 {
 	curws == WORKSPACES - 1 ? changeworkspace_helper(0)
 		:changeworkspace_helper(curws+1);
 }
 
 void
-prevworkspace()
+prevworkspace(const Arg *)
 {
 	curws > 0 ? changeworkspace_helper(curws - 1)
 		: changeworkspace_helper(WORKSPACES-1);}
 
 void
-twobwm_exit()
+twobwm_exit(const Arg *)
 {
 	exit(EXIT_SUCCESS);
 }
@@ -540,7 +540,7 @@ changeworkspace_helper(const uint32_t ws)
 }
 
 void
-always_on_top()
+always_on_top(const Arg *)
 {
 	struct client *cl = NULL;
 
@@ -1492,7 +1492,7 @@ raisewindow(xcb_drawable_t win)
 /* Set window client to either top or bottom of stack depending on
  * where it is now. */
 void
-raiseorlower()
+raiseorlower(const Arg *)
 {
 	uint32_t values[] = { XCB_STACK_MODE_OPPOSITE };
 
@@ -2421,7 +2421,7 @@ teleport(const Arg *arg)
 }
 
 void
-deletewin()
+deletewin(const Arg *arg)
 {
 	bool use_delete = false;
 	xcb_icccm_get_wm_protocols_reply_t protocols;
@@ -3204,7 +3204,7 @@ run(void)
 	}
 	if (sigcode == SIGHUP) {
 		sigcode = 0;
-		twobwm_restart();
+		twobwm_restart(NULL);
 	}
 }
 
@@ -3417,7 +3417,7 @@ setup(int scrno)
 }
 
 void
-twobwm_restart(void)
+twobwm_restart(const Arg *)
 {
 	xcb_set_input_focus(conn, XCB_NONE, XCB_INPUT_FOCUS_POINTER_ROOT,
 			XCB_CURRENT_TIME);
